# .github/workflows/go-microservices-ci.yaml

name: Go Microservices CI

on:
  push:
    branches:
      - main # This workflow will run on pushes to the 'main' branch
  create:
    tags:
      - 'v*.*.*' # Trigger on new tags like v1.0.0, v1.0.1, etc.

env:
  # The Docker Hub username from your GitHub Secrets.
  # Used as the repository prefix.
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  # The Docker Hub password/PAT from your GitHub Secrets.
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

jobs:
  sonarqube:
    name: SonarQube
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build-and-test:
    runs-on: ubuntu-latest # Specifies the operating system for the runner

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # Add QEMU setup for multi-architecture emulation before any Docker build steps.
      # This allows building ARM64 images on an AMD64 runner.
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # Set up Docker Buildx, which is required for multi-architecture builds.
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      # Extract Docker metadata (tags and labels) for dynamic tagging.
      # This will automatically tag 'latest' for main branch pushes,
      # and 'vX.Y.Z' for corresponding Git tags.
      - name: Extract Docker metadata for User Service
        id: user_service_meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_USERNAME }}/user-service
          tags: |
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
            type=semver,pattern=v{{version}},event=tag

      - name: Extract Docker metadata for Product Service
        id: product_service_meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_USERNAME }}/product-service
          tags: |
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
            type=semver,pattern=v{{version}},event=tag

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.22"

      # NOTE: For multi-arch builds using buildx, you typically build the Docker image
      # directly from source, and the 'go build' command is usually
      # integrated within the Dockerfile itself (e.g., using a multi-stage build).
      # The separate 'go build' steps here might not be strictly necessary
      # if your Dockerfiles handle the Go compilation.
      # However, if your Dockerfiles depend on pre-compiled binaries, keep these steps.

      - name: Build User Service (Go binary - if Dockerfile needs it)
        run: |
          cd user-service
          go mod tidy
          go build -v -o main .

      - name: Build Product Service (Go binary - if Dockerfile needs it)
        run: |
          cd product-service
          go mod tidy
          go build -v -o main .

      - name: Build and Push User Service Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./user-service # Path to the Dockerfile for user-service
          platforms: linux/amd64,linux/arm64 # Build for both AMD64 and ARM64 architectures
          push: true # Push the multi-arch image to Docker Hub
          tags: ${{ steps.user_service_meta.outputs.tags }} # Use dynamically generated tags
          labels: ${{ steps.user_service_meta.outputs.labels }}
          cache-from: type=gha # Enable GitHub Actions caching for faster builds
          cache-to: type=gha,mode=max # Cache layers for future builds

      - name: Build and Push Product Service Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./product-service # Path to the Dockerfile for product-service
          platforms: linux/amd64,linux/arm64 # Build for both AMD64 and ARM64 architectures
          push: true # Push the multi-arch image to Docker Hub
          tags: ${{ steps.product_service_meta.outputs.tags }} # Use dynamically generated tags
          labels: ${{ steps.product_service_meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
